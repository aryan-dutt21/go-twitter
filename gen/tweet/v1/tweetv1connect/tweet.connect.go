// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tweet/v1/tweet.proto

package tweetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "twitter/gen/tweet/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TweetsServiceName is the fully-qualified name of the TweetsService service.
	TweetsServiceName = "tweet.v1.TweetsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TweetsServiceGetTweetsProcedure is the fully-qualified name of the TweetsService's GetTweets RPC.
	TweetsServiceGetTweetsProcedure = "/tweet.v1.TweetsService/GetTweets"
	// TweetsServiceSetTweetProcedure is the fully-qualified name of the TweetsService's SetTweet RPC.
	TweetsServiceSetTweetProcedure = "/tweet.v1.TweetsService/SetTweet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tweetsServiceServiceDescriptor         = v1.File_tweet_v1_tweet_proto.Services().ByName("TweetsService")
	tweetsServiceGetTweetsMethodDescriptor = tweetsServiceServiceDescriptor.Methods().ByName("GetTweets")
	tweetsServiceSetTweetMethodDescriptor  = tweetsServiceServiceDescriptor.Methods().ByName("SetTweet")
)

// TweetsServiceClient is a client for the tweet.v1.TweetsService service.
type TweetsServiceClient interface {
	GetTweets(context.Context, *connect.Request[v1.GetTweetsRequest]) (*connect.Response[v1.GetTweetsResponse], error)
	SetTweet(context.Context, *connect.Request[v1.SetTweetRequest]) (*connect.Response[v1.SetTweetResponse], error)
}

// NewTweetsServiceClient constructs a client for the tweet.v1.TweetsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTweetsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TweetsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tweetsServiceClient{
		getTweets: connect.NewClient[v1.GetTweetsRequest, v1.GetTweetsResponse](
			httpClient,
			baseURL+TweetsServiceGetTweetsProcedure,
			connect.WithSchema(tweetsServiceGetTweetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTweet: connect.NewClient[v1.SetTweetRequest, v1.SetTweetResponse](
			httpClient,
			baseURL+TweetsServiceSetTweetProcedure,
			connect.WithSchema(tweetsServiceSetTweetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tweetsServiceClient implements TweetsServiceClient.
type tweetsServiceClient struct {
	getTweets *connect.Client[v1.GetTweetsRequest, v1.GetTweetsResponse]
	setTweet  *connect.Client[v1.SetTweetRequest, v1.SetTweetResponse]
}

// GetTweets calls tweet.v1.TweetsService.GetTweets.
func (c *tweetsServiceClient) GetTweets(ctx context.Context, req *connect.Request[v1.GetTweetsRequest]) (*connect.Response[v1.GetTweetsResponse], error) {
	return c.getTweets.CallUnary(ctx, req)
}

// SetTweet calls tweet.v1.TweetsService.SetTweet.
func (c *tweetsServiceClient) SetTweet(ctx context.Context, req *connect.Request[v1.SetTweetRequest]) (*connect.Response[v1.SetTweetResponse], error) {
	return c.setTweet.CallUnary(ctx, req)
}

// TweetsServiceHandler is an implementation of the tweet.v1.TweetsService service.
type TweetsServiceHandler interface {
	GetTweets(context.Context, *connect.Request[v1.GetTweetsRequest]) (*connect.Response[v1.GetTweetsResponse], error)
	SetTweet(context.Context, *connect.Request[v1.SetTweetRequest]) (*connect.Response[v1.SetTweetResponse], error)
}

// NewTweetsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTweetsServiceHandler(svc TweetsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tweetsServiceGetTweetsHandler := connect.NewUnaryHandler(
		TweetsServiceGetTweetsProcedure,
		svc.GetTweets,
		connect.WithSchema(tweetsServiceGetTweetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tweetsServiceSetTweetHandler := connect.NewUnaryHandler(
		TweetsServiceSetTweetProcedure,
		svc.SetTweet,
		connect.WithSchema(tweetsServiceSetTweetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tweet.v1.TweetsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TweetsServiceGetTweetsProcedure:
			tweetsServiceGetTweetsHandler.ServeHTTP(w, r)
		case TweetsServiceSetTweetProcedure:
			tweetsServiceSetTweetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTweetsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTweetsServiceHandler struct{}

func (UnimplementedTweetsServiceHandler) GetTweets(context.Context, *connect.Request[v1.GetTweetsRequest]) (*connect.Response[v1.GetTweetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tweet.v1.TweetsService.GetTweets is not implemented"))
}

func (UnimplementedTweetsServiceHandler) SetTweet(context.Context, *connect.Request[v1.SetTweetRequest]) (*connect.Response[v1.SetTweetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tweet.v1.TweetsService.SetTweet is not implemented"))
}
